if (_BUILD_MDBM)
    add_library(hdc_plugin_mdbm SHARED mdbm_plugin.cpp storage_interface.cpp)
    target_include_directories(hdc_plugin_mdbm PRIVATE ${MDBM_INCLUDE_DIR})
    target_link_libraries(hdc_plugin_mdbm ${MDBM_LIBRARY} Pluma dl hdcjsoncpp)
    if (BUILD_OWN_MDBM)
        add_dependencies(hdc_plugin_mdbm mdbmDownload)
    endif(BUILD_OWN_MDBM)
    install(TARGETS hdc_plugin_mdbm DESTINATION lib/hdc)
endif(_BUILD_MDBM)

if (ENABLE_REDIS)
    include( Findhiredis )
    find_package(hiredis REQUIRED)
    message("------ REDIS: ${HIREDIS_INCLUDE_DIRS}")
    message("------ REDIS: ${HIREDIS_LIBRARIES}")
    add_library(hdc_plugin_redis SHARED redis_plugin.cpp storage_interface.cpp)
    target_include_directories(hdc_plugin_redis PRIVATE ${HIREDIS_INCLUDE_DIRS})
    target_link_libraries(hdc_plugin_redis ${HIREDIS_LIBRARIES} Pluma dl hdcjsoncpp hiredis)
    install(TARGETS hdc_plugin_redis DESTINATION lib/hdc)
endif (ENABLE_REDIS)

# Create Unordered map storage
include_directories()
add_library(hdc_plugin_umap SHARED umap_plugin.cpp storage_interface.cpp)
target_link_libraries(hdc_plugin_umap Pluma dl hdcjsoncpp)
install(TARGETS hdc_plugin_umap DESTINATION lib/hdc)
install(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} DESTINATION include/hdc/plugins FILES_MATCHING PATTERN "*.h*")
