
types = [
    ("int8",    "HDC_INT8"),
    ("int16",   "HDC_INT16"),
    ("int32",   "HDC_INT32"),
    ("int64",   "HDC_INT64"),
    ("uint8",   "HDC_UINT8"),
    ("uint16",  "HDC_UINT16"),
    ("uint32",  "HDC_UINT32"),
    ("uint64",  "HDC_UINT64"),
    ("float",   "HDC_FLOAT"),
    ("double",  "HDC_DOUBLE"),
]
ranks = [
    ( 1,":"),
    ( 2,":,:"),
    ( 3,":,:,:"),
    ( 4,":,:,:,:"),
    ( 5,":,:,:,:,:"),
    ( 6,":,:,:,:,:,:"),
    ( 7,":,:,:,:,:,:,:"),
    ( 8,":,:,:,:,:,:,:,:"),
    ( 9,":,:,:,:,:,:,:,:,:"),
    (10,":,:,:,:,:,:,:,:,:,:")
]


{% for type_ in types %}
    interface hdc_as_{{ type_[0] }}_{{ rank[0] }}
    {% for rank in ranks %}
        module procedure hdc_as_{{ type_[0] }}_{{ rank[0] }}_
        module procedure hdc_as_{{ type_[0] }}_{{ rank[0] }}_path
    {% endfor %}
    end interface hdc_as_{{ type_[0] }}_{{ rank[0] }}

    function hdc_as_{{ type_[0] }}_{{ rank[0] }}_(this) result(res)
        use iso_c_binding
        type(hdc_t) :: this
        type(hdc_data_t) :: data
        integer(c_{{ type_[0] }}_t), pointer :: res{{ rank[1] }}
        data = c_hdc_get_data(this,c_null_char)
        if (data%rank /= 1) stop "incompatible ranks in hdc_as_{{ type_[0] }}_{{ rank[0] }}_"
        call c_f_pointer(data%data, res, data%dshape(1:data%rank))
    end function hdc_as_{{ type_[0] }}_{{ rank[0] }}_

    subroutine hdc_as_{{ type_[0] }}_{{ rank[0] }}_sub(this, res)
        use iso_c_binding
        type(hdc_t) :: this
        type(hdc_data_t) :: data
        integer(c_{{ type_[0] }}_t), pointer :: res{{ rank[1] }}
        data = c_hdc_get_data(this,c_null_char)
        if (data%rank /= 1) stop "incompatible ranks in hdc_as_{{ type_[0] }}_{{ rank[0] }}_sub"
        call c_f_pointer(data%data, res, data%dshape(1:data%rank))
    end subroutine hdc_as_{{ type_[0] }}_{{ rank[0] }}_sub

    function hdc_as_{{ type_[0] }}_{{ rank[0] }}_path(this, path) result(res)
        use iso_c_binding
        type(hdc_t) :: this
        character(len=*), intent(in) :: path
        type(hdc_data_t) :: data
        integer(c_{{ type_[0] }}_t), pointer :: res{{ rank[1] }}
        data = c_hdc_get_data(this,trim(path)//c_null_char)
        if (data%rank /= {{ rank[0] }}) stop "incompatible ranks in hdc_as_{{ type_[0] }}_{{ rank[0] }}_path"
        call c_f_pointer(data%data, res, data%dshape(1:data%rank))
    end function hdc_as_{{ type_[0] }}_{{ rank[0] }}_path

    subroutine hdc_as_{{ type_[0] }}_{{ rank[0] }}_path_sub(this,path,res)
        use iso_c_binding
        type(hdc_t) :: this
        character(len=*), intent(in) :: path
        type(hdc_data_t) :: data
        integer(c_{{ type_[0] }}_t), pointer :: res{{ rank[1] }}
        data = c_hdc_get_data(this,trim(path)//c_null_char)
        if (data%rank /= {{ rank[0] }}) stop "incompatible ranks in hdc_as_{{ type_[0] }}_{{ rank[0] }}_path_sub"
        call c_f_pointer(data%data, res, data%dshape(1:data%rank))
    end subroutine hdc_as_{{ type_[0] }}_{{ rank[0] }}_path_sub

    module procedure hdc_set_{{ type_[0] }}_scalar

    subroutine hdc_set_{{ type_[0] }}_{{ rank[0] }}(this, data, flags_)
        use iso_c_binding
        type(hdc_t) :: this
        integer(kind=c_{{ type_[0] }}_t), dimension(:), target :: data
        integer(kind=c_size_t), intent(in), optional :: flags_
        integer(kind=c_size_t) :: flags = HDCFortranOrder
        type(hdc_data_t) :: out
        if (present(flags_)) flags = flags_
        out%dtype = {{ type_[1] }}
        out%flags = flags
        out%rank = {{ rank[0] }}
        out%dshape(1:{{ rank[0] }}) = shape(data)
        out%dshape(1+{{ rank[0] }}:) = 0
        out%data = c_loc(data)
        call c_hdc_set_data(this, c_null_char, out);
    end subroutine hdc_set_{{ type_[0] }}_{{ rank[0] }}

    subroutine hdc_set_{{ type_[0] }}_{{ rank[0] }}_path(this, path, data, flags_)
        use iso_c_binding
        type(hdc_t) :: this
        integer(kind=c_{{ type_[0] }}_t), dimension(:), target :: data
        character(len=*), intent(in) :: path
        integer(kind=c_size_t), intent(in), optional :: flags_
        integer(kind=c_size_t) :: flags = HDCFortranOrder
        type(hdc_data_t) :: out
        if (present(flags_)) flags = flags_
        out%dtype = {{ type_[1] }}
        out%flags = flags
        out%rank = {{ rank[0] }}
        out%dshape(1:{{ rank[0] }}) = shape(data)
        out%dshape(1+{{ rank[0] }}:) = 0
        out%data = c_loc(data)
        call c_hdc_set_data(this, trim(path)//c_null_char, out);
    end subroutine hdc_set_{{ type_[0] }}_{{ rank[0] }}_path

    ! TODO: add c_ version

    subroutine hdc_set_{{ type_[0] }}_scalar(this, data)
        use iso_c_binding
        type(hdc_t) :: this
        integer(kind=c_{{ type_[0] }}_t) :: data
        call c_hdc_set_{{ type_[0] }}_scalar(this, data)
    end subroutine hdc_set_int32_scalar
{% endfor %}
