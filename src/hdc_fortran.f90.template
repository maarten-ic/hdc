{% for type_ in types %}
    {% for rank in ranks %}
        interface hdc_as_{{ type_[0] }}_{{ rank[0] }}d
            module procedure hdc_as_{{ type_[0] }}_{{ rank[0] }}d_
            module procedure hdc_as_{{ type_[0] }}_{{ rank[0] }}d_path
        end interface hdc_as_{{ type_[0] }}_{{ rank[0] }}d
    {% endfor %}

    {% for rank in ranks %}
        function hdc_as_{{ type_[0] }}_{{ rank[0] }}d_(this) result(res)
            use iso_c_binding
            type(hdc_t) :: this
            type(hdc_data_t) :: data
            integer(c_{{ type_[0] }}_t), pointer :: res{{ rank[1] }}
            data = c_hdc_get_data(this,c_null_char)
            if (data%rank /= 1) stop "incompatible ranks in hdc_as_{{ type_[0] }}_{{ rank[0] }}d_"
            call c_f_pointer(data%data, res, data%dshape(1:data%rank))
        end function hdc_as_{{ type_[0] }}_{{ rank[0] }}d_

        subroutine hdc_as_{{ type_[0] }}_{{ rank[0] }}d_sub(this, res)
            use iso_c_binding
            type(hdc_t) :: this
            type(hdc_data_t) :: data
            integer(c_{{ type_[0] }}_t), pointer :: res{{ rank[1] }}
            data = c_hdc_get_data(this,c_null_char)
            if (data%rank /= 1) stop "incompatible ranks in hdc_as_{{ type_[0] }}_{{ rank[0] }}d_sub"
            call c_f_pointer(data%data, res, data%dshape(1:data%rank))
        end subroutine hdc_as_{{ type_[0] }}_{{ rank[0] }}d_sub

        function hdc_as_{{ type_[0] }}_{{ rank[0] }}d_path(this, path) result(res)
            use iso_c_binding
            type(hdc_t) :: this
            character(len=*), intent(in) :: path
            type(hdc_data_t) :: data
            integer(c_{{ type_[0] }}_t), pointer :: res{{ rank[1] }}
            data = c_hdc_get_data(this,trim(path)//c_null_char)
            if (data%rank /= {{ rank[0] }}) stop "incompatible ranks in hdc_as_{{ type_[0] }}_{{ rank[0] }}d_path"
            call c_f_pointer(data%data, res, data%dshape(1:data%rank))
        end function hdc_as_{{ type_[0] }}_{{ rank[0] }}d_path

        subroutine hdc_as_{{ type_[0] }}_{{ rank[0] }}d_path_sub(this,path,res)
            use iso_c_binding
            type(hdc_t) :: this
            character(len=*), intent(in) :: path
            type(hdc_data_t) :: data
            integer(c_{{ type_[0] }}_t), pointer :: res{{ rank[1] }}
            data = c_hdc_get_data(this,trim(path)//c_null_char)
            if (data%rank /= {{ rank[0] }}) stop "incompatible ranks in hdc_as_{{ type_[0] }}_{{ rank[0] }}d_path_sub"
            call c_f_pointer(data%data, res, data%dshape(1:data%rank))
        end subroutine hdc_as_{{ type_[0] }}_{{ rank[0] }}d_path_sub

        module procedure hdc_set_{{ type_[0] }}_scalar

        subroutine hdc_set_{{ type_[0] }}_{{ rank[0] }}d_(this, data, flags_)
            use iso_c_binding
            type(hdc_t) :: this
            integer(kind=c_{{ type_[0] }}_t), dimension(:), target :: data
            integer(kind=c_size_t), intent(in), optional :: flags_
            integer(kind=c_size_t) :: flags = HDCFortranOrder
            type(hdc_data_t) :: out
            if (present(flags_)) flags = flags_
            out%dtype = {{ type_[1] }}
            out%flags = flags
            out%rank = {{ rank[0] }}
            out%dshape(1:{{ rank[0] }}) = shape(data)
            out%dshape(1+{{ rank[0] }}:) = 0
            out%data = c_loc(data)
            call c_hdc_set_data(this, c_null_char, out);
        end subroutine hdc_set_{{ type_[0] }}_{{ rank[0] }}d_

        subroutine hdc_set_{{ type_[0] }}_{{ rank[0] }}d_path(this, path, data, flags_)
            use iso_c_binding
            type(hdc_t) :: this
            integer(kind=c_{{ type_[0] }}_t), dimension(:), target :: data
            character(len=*), intent(in) :: path
            integer(kind=c_size_t), intent(in), optional :: flags_
            integer(kind=c_size_t) :: flags = HDCFortranOrder
            type(hdc_data_t) :: out
            if (present(flags_)) flags = flags_
            out%dtype = {{ type_[1] }}
            out%flags = flags
            out%rank = {{ rank[0] }}
            out%dshape(1:{{ rank[0] }}) = shape(data)
            out%dshape(1+{{ rank[0] }}:) = 0
            out%data = c_loc(data)
            call c_hdc_set_data(this, trim(path)//c_null_char, out);
        end subroutine hdc_set_{{ type_[0] }}_{{ rank[0] }}d_path

        ! TODO: add c_ version

        subroutine hdc_set_{{ type_[0] }}_scalar(this, data)
            use iso_c_binding
            type(hdc_t) :: this
            integer(kind=c_{{ type_[0] }}_t) :: data
            call c_hdc_set_{{ type_[0] }}_scalar(this, data)
        end subroutine hdc_set_{{ type_[0] }}_scalar
        {% endfor %}
{% endfor %}
